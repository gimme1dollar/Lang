type var = string 
             
type tp =                         (* types *) 
    Bool                                (* bool *)
  | Int                                 (* int *)
  | Fun of tp * tp                      (* tp -> tp *)
  | Prod of tp * tp                     (* tp * tp *)
  | Unit                                (* unit *)
  | Sum of tp * tp                      (* tp + tp *)

type exp =                        (* expressions *)
    Var of var                          (* variable *)
  | Lam of var * tp * exp               (* lambda abstraction *)
  | App of exp * exp                    (* application *)
  | Pair of exp * exp                   (* pair (e1, e2) *)
  | Fst of exp                          (* projection fst *)
  | Snd of exp                          (* projection snd *)
  | Eunit                               (* unit *)
  | Inl of exp * tp                     (* inleft *)
  | Inr of exp * tp                     (* inright *)
  | Case of exp * var * exp * var * exp (* case e of inl x1 -> e1 | inr x2 -> e2 *)  
  | Fix of var * tp * exp               (* fixed point construct *)
  | True                                (* boolean true *)
  | False                               (* boolean false *)
  | Ifthenelse of exp * exp * exp       (* conditional construct *)
  | Num of int                          (* integer *)
  | Plus                                (* addition *)
  | Minus                               (* subtraction *)
  | Eq                                  (* equality *)
